# Instalarea și încărcarea pachetelor necesare
if (!requireNamespace("readxl", quietly = TRUE)) install.packages("readxl")
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
if (!requireNamespace("corrplot", quietly = TRUE)) install.packages("corrplot")
if (!requireNamespace("psych", quietly = TRUE)) install.packages("psych")
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("caTools", quietly = TRUE)) install.packages("caTools")
if (!requireNamespace("e1071", quietly = TRUE)) install.packages("e1071")
if (!requireNamespace("cluster", quietly = TRUE)) install.packages("cluster")
if (!requireNamespace("factoextra", quietly = TRUE)) install.packages("factoextra")
if (!requireNamespace("ROCR", quietly = TRUE)) install.packages("ROCR")
if (!requireNamespace("clusterSim", quietly = TRUE)) install.packages("clusterSim")
if (!requireNamespace("tidyr", quietly = TRUE)) install.packages("tidyr")

library(readxl)
library(dplyr)
library(corrplot)
library(psych)
library(ggplot2)
library(caTools)
library(e1071)
library(cluster)
library(factoextra)
library(ROCR)
library(clusterSim)
library(tidyr)
# Încărcarea datelor
data <- read_excel("C://Users//ASUS//Desktop//Licenta//licenta.xlsx")
print(head(data))  # Verificarea datelor încărcate
summary(data)

# Verificarea denumirilor variabilelor
print(colnames(data))
# Selectarea și curățarea datelor
library(tidyr)
data_selected <- data %>%
  select(q5, q6, q8, q9, q10, q11, q12, q13, q15, q16, q17, q19, q20) %>%
  drop_na()
print(head(data_selected))  # Verificarea datelor selectate
# Deschiderea unei ferestre grafice și aranjarea histogramelor într-o grilă 3x5
windows()
par(mfrow = c(3, 5))  # Aranjare într-o grilă de 3x5

# Crearea histogramelor pentru variabilele selectate
for (col in colnames(data_selected)) {
  hist(data_selected[[col]], main = paste("Histogramă ", col), xlab = col, ylab = "Frecvență", col = "blue", border = "black")
}
# Calcularea KMO
kmo_result <- KMO(data_selected)
print(kmo_result)

# Standardizarea datelor pentru clusterizare
data_normalized <- scale(data_selected)
print(summary(data_normalized))
data_normalized

# Aplicarea metodei K-means pentru clusterizare inițială
set.seed(123)  # Pentru reproductibilitate
kmeans_result <- kmeans(data_normalized, centers = 3, nstart = 25)
print(kmeans_result)

fviz_cluster(kmeans_result, data = data_normalized)

# Evaluarea acurateței clusterizării pentru clustering-ul cu 3 clustere
sse_3clusters <- kmeans_result$tot.withinss
print(paste("Sum of Squared Errors (SSE) pentru clustering-ul cu 3 clustere:", sse_3clusters))

silhouette_score_3clusters <- silhouette(kmeans_result$cluster, dist(data_normalized))
plot(silhouette_score_3clusters, main = "Silhouette Plot pentru clustering-ul cu 3 clustere")

db_index_3clusters <- index.DB(data_normalized, kmeans_result$cluster, centrotypes = "centroids")$DB
print(paste("Davies-Bouldin Index pentru clustering-ul cu 3 clustere:", db_index_3clusters))

# Adăugarea rezultatului clusterizării la datele originale
data_with_clusters <- data_selected %>%
  mutate(cluster = kmeans_result$cluster)

# Analiza atributele clusterelor pentru clustering-ul cu 3 clustere
cluster_summary_3clusters <- data_with_clusters %>%
  group_by(cluster) %>%
  summarise(across(everything(), list(mean = mean, sd = sd)))
print(cluster_summary_3clusters)

# Filtrarea doar a clusterelor 2 și 3
data_filtered <- data_with_clusters %>%
  filter(cluster %in% c(2, 3))

# Verificarea datelor filtrate
print(head(data_filtered))

# Recalcularea clustering-ului pentru datele filtrate
set.seed(123)
kmeans_filtered_result <- kmeans(data_filtered_normalized, centers = 2, nstart = 25)
print(kmeans_filtered_result)

# Evaluarea acurateței clusterizării pentru clusterele 2 și 3
sse_filtered <- kmeans_filtered_result$tot.withinss
print(paste("Sum of Squared Errors (SSE) pentru clusterele 2 și 3:", sse_filtered))

silhouette_score_filtered <- silhouette(kmeans_filtered_result$cluster, dist(data_filtered_normalized))
plot(silhouette_score_filtered, main = "Silhouette Plot pentru clusterele 2 și 3")

db_index_filtered <- index.DB(data_filtered_normalized, kmeans_filtered_result$cluster, centrotypes = "centroids")$DB
print(paste("Davies-Bouldin Index pentru clusterele 2 și 3:", db_index_filtered))
# Vizualizarea clusterelor 2 și 3
fviz_cluster(kmeans_filtered_result, data = data_filtered_normalized)

# Analiza atributele clusterelor filtrate
cluster_summary_filtered <- data_filtered %>%
  mutate(new_cluster = kmeans_filtered_result$cluster) %>%
  group_by(new_cluster) %>%
  summarise(across(everything(), list(mean = mean, sd = sd)))
print(cluster_summary_filtered)
# Presupunând că ai deja data_filtered care conține clusterele 2 și 3
write.csv(data_filtered, file = "mda_filtered.csv", row.names = FALSE)
getwd()



